import { Box, HStack, VStack, Text, Badge, Tooltip, Button, Divider } from '@chakra-ui/react';
import { getPatchStats } from '../utils/workflowPatcher';

/**
 * PatchTimeline - Visual timeline for navigating through patch states
 * Shows base workflow + each patch as clickable points
 */
export default function PatchTimeline({ patches, selectedSeq, onSeqChange }) {
  // Calculate patch stats for analytics
  const stats = getPatchStats(patches);

  // Create timeline items: base (0) + patches (1, 2, 3, ...)
  const timelineItems = [
    { seq: 0, label: 'Base', nodeId: null, description: 'Original workflow' },
    ...(patches || []).map(p => ({
      seq: p.seq,
      label: `P${p.seq}`,
      nodeId: p.node_id,
      description: p.description || 'No description',
    })),
  ];

  return (
    <VStack align="stretch" spacing={4} w="100%">
      {/* Stats Summary */}
      {patches && patches.length > 0 && (
        <Box
          p={3}
          bg="purple.50"
          borderRadius="md"
          border="1px solid"
          borderColor="purple.200"
        >
          <HStack spacing={6}>
            <VStack align="start" spacing={0}>
              <Text fontSize="xs" color="gray.600">
                Total Patches
              </Text>
              <Text fontSize="lg" fontWeight="bold" color="purple.700">
                {stats.total}
              </Text>
            </VStack>
            <Divider orientation="vertical" h="40px" />
            <VStack align="start" spacing={0}>
              <Text fontSize="xs" color="gray.600">
                Operations
              </Text>
              <Text fontSize="lg" fontWeight="bold" color="purple.700">
                {stats.totalOperations}
              </Text>
            </VStack>
            <Divider orientation="vertical" h="40px" />
            <VStack align="start" spacing={1} flex={1}>
              <Text fontSize="xs" color="gray.600">
                By Node
              </Text>
              <HStack spacing={2} flexWrap="wrap">
                {Object.entries(stats.byNode).map(([nodeId, data]) => (
                  <Badge key={nodeId} colorScheme="purple" fontSize="xs">
                    {nodeId}: {data.count}
                  </Badge>
                ))}
              </HStack>
            </VStack>
          </HStack>
        </Box>
      )}

      {/* Timeline */}
      <Box position="relative" w="100%" py={4}>
        {/* Timeline Line */}
        <Box
          position="absolute"
          top="50%"
          left="0"
          right="0"
          h="2px"
          bg="gray.300"
          transform="translateY(-50%)"
        />

        {/* Timeline Items */}
        <HStack spacing={0} justify="space-between" position="relative">
          {timelineItems.map((item, index) => (
            <Tooltip
              key={item.seq}
              label={
                <VStack align="start" spacing={1}>
                  <Text fontWeight="bold">
                    {item.seq === 0 ? 'Base Workflow' : `Patch #${item.seq}`}
                  </Text>
                  {item.nodeId && (
                    <Text fontSize="xs" color="gray.300">
                      Generated by: {item.nodeId}
                    </Text>
                  )}
                  <Text fontSize="xs">{item.description}</Text>
                </VStack>
              }
              placement="top"
              hasArrow
            >
              <Button
                size="sm"
                borderRadius="full"
                w={selectedSeq === item.seq ? '50px' : '40px'}
                h={selectedSeq === item.seq ? '50px' : '40px'}
                colorScheme={selectedSeq === item.seq ? 'purple' : 'gray'}
                variant={selectedSeq === item.seq ? 'solid' : 'outline'}
                onClick={() => onSeqChange(item.seq)}
                transition="all 0.2s"
                _hover={{
                  transform: 'scale(1.1)',
                  zIndex: 10,
                }}
                boxShadow={selectedSeq === item.seq ? 'lg' : 'sm'}
                position="relative"
                zIndex={selectedSeq === item.seq ? 20 : 1}
              >
                <VStack spacing={0}>
                  <Text fontSize={selectedSeq === item.seq ? 'sm' : 'xs'} fontWeight="bold">
                    {item.label}
                  </Text>
                  {item.nodeId && selectedSeq === item.seq && (
                    <Text fontSize="8px" opacity={0.8}>
                      {item.nodeId.substring(0, 8)}
                    </Text>
                  )}
                </VStack>
              </Button>
            </Tooltip>
          ))}
        </HStack>

        {/* Selected Patch Info */}
        {selectedSeq > 0 && (
          <Box mt={6} p={4} bg="purple.50" borderRadius="md" border="1px solid" borderColor="purple.200">
            <HStack justify="space-between" align="start">
              <VStack align="start" spacing={1} flex={1}>
                <HStack>
                  <Text fontWeight="bold" color="purple.700">
                    Patch #{selectedSeq}
                  </Text>
                  {patches[selectedSeq - 1]?.node_id && (
                    <Badge colorScheme="purple">
                      {patches[selectedSeq - 1].node_id}
                    </Badge>
                  )}
                </HStack>
                <Text fontSize="sm" color="gray.700">
                  {patches[selectedSeq - 1]?.description || 'No description'}
                </Text>
                <Text fontSize="xs" color="gray.600">
                  {patches[selectedSeq - 1]?.operations?.length || 0} operation(s)
                </Text>
              </VStack>
            </HStack>
          </Box>
        )}

        {selectedSeq === 0 && (
          <Box mt={6} p={4} bg="blue.50" borderRadius="md" border="1px solid" borderColor="blue.200">
            <Text fontWeight="bold" color="blue.700">
              Base Workflow
            </Text>
            <Text fontSize="sm" color="gray.700">
              Original workflow before any patches were applied
            </Text>
          </Box>
        )}
      </Box>
    </VStack>
  );
}
